package com.huimei.platform.admin.file.service;


import com.alibaba.fastjson.JSONArray;
import com.alibaba.simpleimage.ImageWrapper;
import com.alibaba.simpleimage.util.ImageReadHelper;
import com.huimei.platform.BaseService;
import com.huimei.platform.admin.file.command.UploadFileUpdateCommand;
import com.huimei.platform.admin.file.command.UploadMultipleFileCommand;
import com.huimei.platform.admin.file.dto.UploadFileDto;
import com.huimei.platform.admin.file.entity.FastDFSFile;
import com.huimei.platform.admin.file.entity.UploadFile;
import com.huimei.platform.admin.file.mapper.UploadFileMapper;
import com.huimei.platform.commons.InvokeResult;
import com.huimei.platform.utils.ShortUUID;
import net.coobird.thumbnailator.Thumbnails;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.csource.common.NameValuePair;
import org.csource.fastdfs.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.PostConstruct;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * 文件上传事务服务
 * generated by system on 2016-4-12 12:40:31
 */
@Service("com.huimei.platform.admin.file.service.UploadFileService")
@Transactional(readOnly = false)
public class UploadFileService extends BaseService {

    private static TrackerClient trackerClient;

    private static TrackerServer trackerServer;

    private static StorageServer storageServer;

    private static StorageClient storageClient;


    static {
        try {
            String filePath = new ClassPathResource("fdfs_client.conf").getFile().getAbsolutePath();
            System.out.println("filePath:"+filePath);
            ClientGlobal.init(filePath);
            trackerClient = new TrackerClient();
            trackerServer = trackerClient.getConnection();
            storageServer = trackerClient.getStoreStorage(trackerServer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @Autowired
    UploadFileMapper uploadFileMapper;

    protected String fileDir;

    private String fastdirPath = "C:\\file\\image\\";
    private byte[] bytes;

    @PostConstruct
    void init() {
        fileDir = environment.getAttach().getHome();
    }

    /**
     * 新建
     *
     * @return
     */
    public UploadFile createUploadFile(String uuid, String name, String type, long size, String path, String url) {
        UploadFile entity = new UploadFile();
        entity.setUuid(uuid);
        entity.setCreatedTime(new Date());
        //根据前台传入的其他参数设置entity相关属性
        entity.setName(name);
        entity.setType(type);
        entity.setSize(size);
        entity.setPath(path);
        entity.setUrl(url);

        uploadFileMapper.insert(entity);
        return entity;

    }

    /**
     * 更新
     *
     * @param command
     * @return
     */
    public InvokeResult updateUploadFile(UploadFileUpdateCommand command) {
        UploadFile entity = uploadFileMapper.selectByUuid(command.getUuid());
        if (entity == null)
            return InvokeResult.failure("404");
        entity.setUpdatedTime(new Date());
        //根据前台传入的其他参数设置entity相关属性
        entity.setName(command.getName());
        entity.setType(command.getType());
        entity.setSize(command.getSize());
        entity.setPath(command.getPath());
        entity.setUrl(command.getUrl());
        try {
            uploadFileMapper.update(entity);
            return InvokeResult.success(entity);
        } catch (Exception e) {
            return InvokeResult.failure("500", e.getMessage());
        }
    }

    /**
     * 移除
     *
     * @param uuid
     * @return
     */
    public InvokeResult removeUploadFile(String uuid) {
        try {
            uploadFileMapper.deleteByUuid(uuid);
            return InvokeResult.success();
        } catch (Exception e) {
            return InvokeResult.failure("500", e.getMessage());
        }
    }

    /**
     * 上传多文件
     *
     * @param request
     * @return
     */
    public InvokeResult uploadMultipleFile(UploadMultipleFileCommand command, HttpServletRequest request, String imageFormatSize) {
        if (command == null || command.getFiles() == null || command.getFiles().length == 0) {
            LOG.error("文件流为空,请核实");
            return InvokeResult.failure("404");
        }

        JSONArray fileUploadedList = new JSONArray();
        MultipartFile[] files = command.getFiles();
        //并且上传多个文件时，前台表单中的所有<input type="file"/>的name都应该是file，否则参数里的files无法获取到所有上传的文件
        for (MultipartFile file : files) {
            if (file.isEmpty()) {
                LOG.error("文件未上传");
                continue;
            }

            String fileUuid = ShortUUID.randomUUID();
            //文件全名
            String fileOldName = file.getOriginalFilename();
            //文件类型
            String fileSuffix = fileOldName.substring(fileOldName.lastIndexOf(".") + 1);
            //文件名字
            String fileName = fileOldName.substring(0, fileOldName.lastIndexOf("."));

            //图片大小
            long fileSize = file.getSize();


            LOG.debug("文件长度: {}", file.getSize());
            LOG.debug("文件类型: {}", file.getContentType());
            LOG.debug("文件原名: {}", file.getOriginalFilename());
            LOG.debug("========================================");

            try {

                bytes = file.getBytes();
                //实现FastDFS文件上传
               // String local_filename = fastdirPath + fileOldName;
                FastDFSFile fastfile = new FastDFSFile();
                fastfile.setContent(bytes);
                fastfile.setExt(fileSuffix);
                Map<String, String> map = upload(fastfile);
                System.out.println("图片上传成功");
                String groupName = map.get("groupName");
                String remoteFileName = map.get("remoteFileName");

                // SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");
                // Date date = new Date();
                // String ymd = sdf.format(date);
                // String savePath = groupName + "/" + remoteFileName;

                String fileUrl = "";
                if ("group1".equals(groupName)) {
                    fileUrl = "http://192.168.0.181:8888/" + groupName + "/" + remoteFileName;
                } else if ("group2".equals(groupName)) {
                    fileUrl = "http://192.168.0.74:8888/" + groupName + "/" + remoteFileName;
                }
                String relativeFilePath = fileSuffix;

                //实现图片下载
                byte[] downFastFile = downFile(groupName, remoteFileName);
                System.out.println("图片下载成功");
                IOUtils.write(downFastFile, new FileOutputStream("C:\\file\\down/" + fileOldName));


                // 保存到数据库
                UploadFile entity = new UploadFile();
                entity.setUuid(fileUuid);
                entity.setName(fileName);
                entity.setSize(fileSize);
                entity.setPath(relativeFilePath);//存相对路径
                entity.setType(fileSuffix);
                entity.setUrl(fileUrl);
                uploadFileMapper.insert(entity);

                //保存返回的对象
                UploadFileDto dto = new UploadFileDto();
                dto.setUuid(fileUuid);
                dto.setName(fileName);
                dto.setUrl(fileUrl);
                dto.setType(entity.getType());
                fileUploadedList.add(dto);

                //实现图片删除
                //deleteFile(groupName,remoteFileName);
                //System.out.println("图片删除成功！");

                // saveMoreImages(imageFormatSize, file, fileUuid, basePath, fileSuffix, ymd, savePath, fileName);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        InvokeResult result = InvokeResult.success();
        result.put("items", fileUploadedList);
        return result;
    }


    //实现文件上传
    public static Map<String, String> upload(FastDFSFile file) {
        NameValuePair[] meta_list = new NameValuePair[1];
        meta_list[0] = new NameValuePair("author", file.getAuthor());

        long startTime = System.currentTimeMillis();
        String[] uploadResults = null;
        try {
            storageClient = new StorageClient(trackerServer, storageServer);
            uploadResults = storageClient.upload_file(file.getContent(), file.getExt(), meta_list);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Map<String, String> map = new HashMap<>();
        map.put("groupName", uploadResults[0]);
        map.put("remoteFileName", uploadResults[1]);
        return map;
    }

    //实现文件下载
    public static byte[] downFile(String groupName, String remoteFileName) {
        try {
            storageClient = new StorageClient(trackerServer, storageServer);
            byte[] fileByte = storageClient.download_file(groupName, remoteFileName);
            // InputStream ins = new ByteArrayInputStream(fileByte);
            return fileByte;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    //实现图片删除
    public static void deleteFile(String groupName, String remoteFileName)
            throws Exception {
        storageClient = new StorageClient(trackerServer, storageServer);
        int i = storageClient.delete_file(groupName, remoteFileName);
    }


    private void saveMoreImages(String imageFormatSize, MultipartFile file, String fileUuid,
                                String basePath, String fileSuffix, String ymd, String savePath, String fileName) throws Exception {
        double width = 0;
        String[] formats = new String[0];
        if (StringUtils.isNotBlank(imageFormatSize)) {
            formats = imageFormatSize.split(",");
            try {
                BufferedImage bufferedImage = ImageIO.read(file.getInputStream());
                width = bufferedImage.getWidth();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }


        for (int i = 0; i < formats.length; i++) {

            int newWidth = Integer.parseInt(formats[i]);
            if (newWidth < width) {
                String tempFileUuid = fileUuid + "_" + formats[i];
                double scale = newWidth / width;

                String fileUrl = basePath + "/public/file/" + tempFileUuid;
                String relativeFilePath = ymd + File.separator + tempFileUuid + "." + fileSuffix;
                String filePath = savePath + File.separator + tempFileUuid + "." + fileSuffix;

                //ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

                ImageWrapper imageWrapper = ImageReadHelper.read(file.getInputStream());

                File newFile = new File(filePath);

                Thumbnails.of(imageWrapper.getAsBufferedImage()).scale(scale).toFile(newFile);

                // 保存到数据库
                UploadFile entity = new UploadFile();
                entity.setUuid(tempFileUuid);
                entity.setName(fileName);
                entity.setSize(newFile.length());
                entity.setPath(relativeFilePath);//存相对路径
                entity.setType(fileSuffix);
                entity.setUrl(fileUrl);
//                entity.setCreatedTime(new Date());
                uploadFileMapper.insert(entity);
            }

        }
    }


    public InvokeResult uploadFileCK5(MultipartFile file, HttpServletRequest request, String imageFormatSize) {

        if (file.isEmpty()) {
            LOG.error("文件未上传");
            return InvokeResult.failure("文件未上传");
        }

        InvokeResult result = InvokeResult.success();


        String fileUuid = ShortUUID.randomUUID();
        String fileOldName = file.getOriginalFilename();
        String fileSuffix = fileOldName.substring(fileOldName.lastIndexOf(".") + 1);
        String fileName = fileOldName.substring(0, fileOldName.lastIndexOf("."));

        long fileSize = file.getSize();


        String basePath = getProcessedBaseRequestPath(request);


        LOG.debug("文件长度: {}", file.getSize());
        LOG.debug("文件类型: {}", file.getContentType());
        LOG.debug("文件原名: {}", file.getOriginalFilename());
        LOG.debug("========================================");

        //TODO 文件上传目录
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");
        Date date = new Date();
        String ymd = sdf.format(date);
        File tempFile = new File(fileDir);
        if (!tempFile.exists()) {
            tempFile.mkdirs();
        }

        String savePath = fileDir + File.separator + ymd;
        // 创建文件夹
        File dirFile = new File(savePath);
        if (!dirFile.exists()) {
            dirFile.mkdirs();
        }

        String fileUrl = basePath + "/public/file/" + fileUuid;
        String relativeFilePath = ymd + File.separator + fileUuid + "." + fileSuffix;
        String filePath = savePath + File.separator + fileUuid + "." + fileSuffix;

        try {
            //这里不必处理IO流关闭的问题，因为FileUtils.copyInputStreamToFile()方法内部会自动把用到的IO流关掉，我是看它的源码才知道的

            FileUtils.copyInputStreamToFile(file.getInputStream(), new File(filePath));
            // 保存到数据库
            UploadFile entity = new UploadFile();
            entity.setUuid(fileUuid);
            entity.setName(fileName);
            entity.setSize(fileSize);
            entity.setPath(relativeFilePath);//存相对路径
            entity.setType(fileSuffix);
            entity.setUrl(fileUrl);
            entity.setCreatedTime(date);
            uploadFileMapper.insert(entity);

            //保存返回的对象
            result.put("uploaded", 1);
            result.put("url", fileUrl + "_720");


            saveMoreImages(imageFormatSize, file, fileUuid, basePath, fileSuffix, ymd, savePath, fileName);

        } catch (Exception e) {
            e.printStackTrace();
        }


        return result;
    }
}
